// Code generated by MockGen. DO NOT EDIT.
// Source: I:\Goland\gophermart\internal\user\domain\uow\uow.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	repository "github.com/DimKa163/gophermart/internal/user/domain/repository"
	uow "github.com/DimKa163/gophermart/internal/user/domain/uow"
	gomock "github.com/golang/mock/gomock"
)

// MockUnitOfWork is a mock of UnitOfWork interface.
type MockUnitOfWork struct {
	ctrl     *gomock.Controller
	recorder *MockUnitOfWorkMockRecorder
}

// MockUnitOfWorkMockRecorder is the mock recorder for MockUnitOfWork.
type MockUnitOfWorkMockRecorder struct {
	mock *MockUnitOfWork
}

// NewMockUnitOfWork creates a new mock instance.
func NewMockUnitOfWork(ctrl *gomock.Controller) *MockUnitOfWork {
	mock := &MockUnitOfWork{ctrl: ctrl}
	mock.recorder = &MockUnitOfWorkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnitOfWork) EXPECT() *MockUnitOfWorkMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockUnitOfWork) BeginTx(ctx context.Context, fn func(context.Context, uow.UnitOfWork) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockUnitOfWorkMockRecorder) BeginTx(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockUnitOfWork)(nil).BeginTx), ctx, fn)
}

// BonusBalanceRepository mocks base method.
func (m *MockUnitOfWork) BonusBalanceRepository() repository.BonusBalanceRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BonusBalanceRepository")
	ret0, _ := ret[0].(repository.BonusBalanceRepository)
	return ret0
}

// BonusBalanceRepository indicates an expected call of BonusBalanceRepository.
func (mr *MockUnitOfWorkMockRecorder) BonusBalanceRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BonusBalanceRepository", reflect.TypeOf((*MockUnitOfWork)(nil).BonusBalanceRepository))
}

// BonusMovementRepository mocks base method.
func (m *MockUnitOfWork) BonusMovementRepository() repository.TransactionRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BonusMovementRepository")
	ret0, _ := ret[0].(repository.TransactionRepository)
	return ret0
}

// BonusMovementRepository indicates an expected call of BonusMovementRepository.
func (mr *MockUnitOfWorkMockRecorder) BonusMovementRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BonusMovementRepository", reflect.TypeOf((*MockUnitOfWork)(nil).BonusMovementRepository))
}

// OrderRepository mocks base method.
func (m *MockUnitOfWork) OrderRepository() repository.OrderRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderRepository")
	ret0, _ := ret[0].(repository.OrderRepository)
	return ret0
}

// OrderRepository indicates an expected call of OrderRepository.
func (mr *MockUnitOfWorkMockRecorder) OrderRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderRepository", reflect.TypeOf((*MockUnitOfWork)(nil).OrderRepository))
}

// UserRepository mocks base method.
func (m *MockUnitOfWork) UserRepository() repository.UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRepository")
	ret0, _ := ret[0].(repository.UserRepository)
	return ret0
}

// UserRepository indicates an expected call of UserRepository.
func (mr *MockUnitOfWorkMockRecorder) UserRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRepository", reflect.TypeOf((*MockUnitOfWork)(nil).UserRepository))
}
