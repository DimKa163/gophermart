// Code generated by MockGen. DO NOT EDIT.
// Source: I:\Goland\gophermart\internal\user\domain\uow\uow.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	repository "github.com/DimKa163/gophermart/internal/user/domain/repository"
	uow "github.com/DimKa163/gophermart/internal/user/domain/uow"
	gomock "github.com/golang/mock/gomock"
)

// MockUnitOfWork is a mock of UnitOfWork interface.
type MockUnitOfWork struct {
	ctrl     *gomock.Controller
	recorder *MockUnitOfWorkMockRecorder
}

// MockUnitOfWorkMockRecorder is the mock recorder for MockUnitOfWork.
type MockUnitOfWorkMockRecorder struct {
	mock *MockUnitOfWork
}

// NewMockUnitOfWork creates a new mock instance.
func NewMockUnitOfWork(ctrl *gomock.Controller) *MockUnitOfWork {
	mock := &MockUnitOfWork{ctrl: ctrl}
	mock.recorder = &MockUnitOfWorkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnitOfWork) EXPECT() *MockUnitOfWorkMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockUnitOfWork) Begin(ctx context.Context) (uow.TxUnitOfWork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", ctx)
	ret0, _ := ret[0].(uow.TxUnitOfWork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockUnitOfWorkMockRecorder) Begin(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockUnitOfWork)(nil).Begin), ctx)
}

// OrderRepository mocks base method.
func (m *MockUnitOfWork) OrderRepository() repository.OrderRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderRepository")
	ret0, _ := ret[0].(repository.OrderRepository)
	return ret0
}

// OrderRepository indicates an expected call of OrderRepository.
func (mr *MockUnitOfWorkMockRecorder) OrderRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderRepository", reflect.TypeOf((*MockUnitOfWork)(nil).OrderRepository))
}

// UserRepository mocks base method.
func (m *MockUnitOfWork) UserRepository() repository.UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRepository")
	ret0, _ := ret[0].(repository.UserRepository)
	return ret0
}

// UserRepository indicates an expected call of UserRepository.
func (mr *MockUnitOfWorkMockRecorder) UserRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRepository", reflect.TypeOf((*MockUnitOfWork)(nil).UserRepository))
}

// MockTxUnitOfWork is a mock of TxUnitOfWork interface.
type MockTxUnitOfWork struct {
	ctrl     *gomock.Controller
	recorder *MockTxUnitOfWorkMockRecorder
}

// MockTxUnitOfWorkMockRecorder is the mock recorder for MockTxUnitOfWork.
type MockTxUnitOfWorkMockRecorder struct {
	mock *MockTxUnitOfWork
}

// NewMockTxUnitOfWork creates a new mock instance.
func NewMockTxUnitOfWork(ctrl *gomock.Controller) *MockTxUnitOfWork {
	mock := &MockTxUnitOfWork{ctrl: ctrl}
	mock.recorder = &MockTxUnitOfWorkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxUnitOfWork) EXPECT() *MockTxUnitOfWorkMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTxUnitOfWork) Commit(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTxUnitOfWorkMockRecorder) Commit(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTxUnitOfWork)(nil).Commit), ctx)
}

// OrderRepository mocks base method.
func (m *MockTxUnitOfWork) OrderRepository() repository.OrderRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderRepository")
	ret0, _ := ret[0].(repository.OrderRepository)
	return ret0
}

// OrderRepository indicates an expected call of OrderRepository.
func (mr *MockTxUnitOfWorkMockRecorder) OrderRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderRepository", reflect.TypeOf((*MockTxUnitOfWork)(nil).OrderRepository))
}

// Rollback mocks base method.
func (m *MockTxUnitOfWork) Rollback(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTxUnitOfWorkMockRecorder) Rollback(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTxUnitOfWork)(nil).Rollback), ctx)
}

// UserRepository mocks base method.
func (m *MockTxUnitOfWork) UserRepository() repository.UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRepository")
	ret0, _ := ret[0].(repository.UserRepository)
	return ret0
}

// UserRepository indicates an expected call of UserRepository.
func (mr *MockTxUnitOfWorkMockRecorder) UserRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRepository", reflect.TypeOf((*MockTxUnitOfWork)(nil).UserRepository))
}
